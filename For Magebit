provider "aws" {
 access_key = "YOUR_ACCESS_KEY"
 secret_key = "YOUR_SECRET_KEY"
 region     = "eu-central-1"
}

data "aws_ami" "ubuntu" {
  most_recent = true

  filter {
    name   = "name"
    values = ["ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-*"]
  }

  filter {
    name   = "virtualization-type"
    values = ["hvm"]
  }

  owners = ["099720109477"]
  
   tags = {
    Name = "mahendra_instance"
  }

}

resource "aws_security_group" "mahendra_security" {
  name        = "mahendra_security"
  description = "security group for terraform"

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

 ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 65535
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags= {
    Name = "mahendra_security"
  }
}

resource "aws_launch_configuration" "launch_conf" {
  image_id      = data.aws_ami.ubuntu.id
  instance_type = "t2.micro"
  key_name = "mahendrakeypair"
  security_groups = ["mahendra_security_terraform"]
  
  lifecycle {
      create_before_destroy = true
  }
}

resource "aws_autoscaling_group" "asg_1" {
  availability_zones = ["eu-central-1a", "eu-central-1b", "eu-central-1c"]
  max_size           = 4
  min_size           = 2
  load_balancers = [aws_elb.Mahendra1.id] 
  launch_configuration = aws_launch_configuration.launch_conf.id
  
  lifecycle {
      create_before_destroy = true
  }  
}


resource "aws_elb" "Mahendra1" {
  name               = "Mahendra2"
  availability_zones = ["eu-central-1a", "eu-central-1b", "eu-central-1c"]
   
  listener {
    instance_port     = 80
    instance_protocol = "http"
    lb_port           = 80
    lb_protocol       = "http"
  }

  health_check {
    healthy_threshold   = 2
    unhealthy_threshold = 2
    timeout             = 3
    target              = "HTTP:80/"
    interval            = 30
  }


  cross_zone_load_balancing   = true
  idle_timeout                = 400
  connection_draining         = true
  connection_draining_timeout = 400

  tags = {
    Name = "Mahendra2"
  }
}

output "elb_dns_name" {
value = aws_elb.Mahendra1.dns_name
}
